/**
2021-11-16. Andrés Del Río
Este script permite crear una tabla con los registros históricos del avance planificado
y el avance reprogramado de todas los proyectos registrados en el sistema, ajustados
por costos.
**/


/**
Ação 1 do procedimento
Se elimina tabla CUSTPROJPLANDATA **/
drop table if exists CUSTPROJPLANDATA;

/** 
Ação 2 do procedimento
Se crea tabla CUSTPROJPLANDATA **/
create table CUSTPROJPLANDATA (
    id int generated by default as identity,
    cd_project int not null,
    id_project varchar(50) not null,
    title varchar(255) not null,
    record_date date not null,
    plan_progress dec(15,2) null,
    repl_progress dec(15,2) null,
    actual_progress dec(15,2) null,
    primary key(cd_project, record_date)
);

/** Se elimina función saveProjHistData **/
drop function saveProjHistData;

/** 
Ação 3 do procedimento
Se crea función saveProjHistData, que recibe como parámetro el identificador del proyecto en el SE Suite. 
La función calcula el avance planificado y el avance reprogramado para cada uno de los días del proyecto. **/
drop function saveProjHistData;
create or replace function saveProjHistData(project_id varchar)
returns int
language plpgsql
as
$$
declare
records integer;
begin



    insert into CUSTPROJPLANDATA(cd_project, id_project,title, record_date, plan_progress, repl_progress, actual_progress) 
    SELECT
    TBL4.CD_PROYECTO cd_project,
    TBL4.ID_PROYECTO id_project,
    TBL4.PROYECTO title,
    dd record_date,
    ROUND(
      ((TBL4.PORC_PLAN_CLC_INGENIERIA) * (TBL4.CLC_INGENIERIA / TBL4.SUMATORIA_FASES)) +
      ((TBL4.PORC_PLAN_INGENIERIA) * (TBL4.INGENIERIA / TBL4.SUMATORIA_FASES)) +
      ((TBL4.PORC_PLAN_CLC_EJECUCION) * (TBL4.CLC_EJECUCION / TBL4.SUMATORIA_FASES)) +  
      ((TBL4.PORC_PLAN_EJECUCION) * (TBL4.EJECUCION / TBL4.SUMATORIA_FASES)) + 
      ((TBL4.PORC_PLAN_PERMISOS) * (TBL4.PERMISOS / TBL4.SUMATORIA_FASES)) +
      ((TBL4.PORC_PLAN_PEM) * (TBL4.PEM / TBL4.SUMATORIA_FASES)) +  
      ((TBL4.PORC_PLAN_CIERRE) * (TBL4.CIERRE / TBL4.SUMATORIA_FASES)) 
      ) plan_progress,
    ROUND(
      ((TBL4.PORC_REPR_CLC_INGENIERIA) * (TBL4.CLC_INGENIERIA / TBL4.SUMATORIA_FASES)) +
      ((TBL4.PORC_REPR_INGENIERIA) * (TBL4.INGENIERIA / TBL4.SUMATORIA_FASES)) +
      ((TBL4.PORC_REPR_CLC_EJECUCION) * (TBL4.CLC_EJECUCION / TBL4.SUMATORIA_FASES)) +  
      ((TBL4.PORC_REPR_EJECUCION) * (TBL4.EJECUCION / TBL4.SUMATORIA_FASES)) + 
      ((TBL4.PORC_REPR_PERMISOS) * (TBL4.PERMISOS / TBL4.SUMATORIA_FASES)) +
      ((TBL4.PORC_REPR_PEM) * (TBL4.PEM / TBL4.SUMATORIA_FASES)) +  
      ((TBL4.PORC_REPR_CIERRE) * (TBL4.CIERRE / TBL4.SUMATORIA_FASES))
      )
       repl_progress,
       NULL actual_progress
    FROM
    (SELECT

    dd,
    TBL3.CD_PROYECTO,
    TBL3.ID_PROYECTO,
    TBL3.PROYECTO,


    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.02' THEN TBL3.COSTO ELSE 0 END) CLC_INGENIERIA,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.01' THEN TBL3.COSTO ELSE 0 END) INGENIERIA,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.04' THEN TBL3.COSTO ELSE 0 END) CLC_EJECUCION,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.03' THEN TBL3.COSTO ELSE 0 END) EJECUCION,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.07' THEN TBL3.COSTO ELSE 0 END) PERMISOS,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.08' THEN TBL3.COSTO ELSE 0 END) PEM,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.09' THEN TBL3.COSTO ELSE 0 END) CIERRE,

    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.02' THEN TBL3.PORC_PLAN_ATI ELSE 0 END) PORC_PLAN_CLC_INGENIERIA,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.01' THEN TBL3.PORC_PLAN_ATI ELSE 0 END) PORC_PLAN_INGENIERIA,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.04' THEN TBL3.PORC_PLAN_ATI ELSE 0 END) PORC_PLAN_CLC_EJECUCION,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.03' THEN TBL3.PORC_PLAN_ATI ELSE 0 END) PORC_PLAN_EJECUCION,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.07' THEN TBL3.PORC_PLAN_ATI ELSE 0 END) PORC_PLAN_PERMISOS,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.08' THEN TBL3.PORC_PLAN_ATI ELSE 0 END) PORC_PLAN_PEM,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.09' THEN TBL3.PORC_PLAN_ATI ELSE 0 END) PORC_PLAN_CIERRE,

    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.02' THEN TBL3.PORC_REPR_ATI ELSE 0 END) PORC_REPR_CLC_INGENIERIA,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.01' THEN TBL3.PORC_REPR_ATI ELSE 0 END) PORC_REPR_INGENIERIA,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.04' THEN TBL3.PORC_REPR_ATI ELSE 0 END) PORC_REPR_CLC_EJECUCION,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.03' THEN TBL3.PORC_REPR_ATI ELSE 0 END) PORC_REPR_EJECUCION,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.07' THEN TBL3.PORC_REPR_ATI ELSE 0 END) PORC_REPR_PERMISOS,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.08' THEN TBL3.PORC_REPR_ATI ELSE 0 END) PORC_REPR_PEM,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.09' THEN TBL3.PORC_REPR_ATI ELSE 0 END) PORC_REPR_CIERRE,

    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.02' THEN TBL3.PORC_REAL_ATI ELSE 0 END) PORC_REAL_CLC_INGENIERIA,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.01' THEN TBL3.PORC_REAL_ATI ELSE 0 END) PORC_REAL_INGENIERIA,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.04' THEN TBL3.PORC_REAL_ATI ELSE 0 END) PORC_REAL_CLC_EJECUCION,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.03' THEN TBL3.PORC_REAL_ATI ELSE 0 END) PORC_REAL_EJECUCION,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.07' THEN TBL3.PORC_REAL_ATI ELSE 0 END) PORC_REAL_PERMISOS,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.08' THEN TBL3.PORC_REAL_ATI ELSE 0 END) PORC_REAL_PEM,
    SUM(CASE WHEN TBL3.TIPOCOSTO = 'ABA.001.09' THEN TBL3.PORC_REAL_ATI ELSE 0 END) PORC_REAL_CIERRE,


    SUM(TBL3.COSTO) SUMATORIA_FASES



    FROM
    (SELECT
    C.NMCOST,
    CASE 
    WHEN C.MNREPLTOTCOST IS NOT NULL THEN COALESCE(C.MNREPLTOTCOST,0)
    ELSE COALESCE(C.MNPLANTOTCOST,0)
    END COSTO,
    CT.IDCOSTTYPE TIPOCOSTO,
    TBL2.*
    FROM PRTASK AB
    LEFT JOIN PRTASK ATI ON ATI.CDBASETASK = AB.CDTASK
    LEFT JOIN
    (SELECT
    DISTINCT
    dd,
    TBL.CD_PROYECTO,
    TBL.ID_PROYECTO,
    TBL.PROYECTO,
    TBL.CD_TAREA,
    TBL.ID_TAREA,
    TBL.TAREA,
    ROUND(SUM(TBL.DURACION_PLAN_HASTA) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA),2) TOTAL_PLAN_A_HOY,
    ROUND(SUM(TBL.DURACION_REPR_HASTA) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA),2) TOTAL_REPR_A_HOY,
    ROUND(SUM(TBL.DURACION_REAL_HASTA) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA),2) TOTAL_REAL_A_HOY,

    ROUND(SUM(TBL.PLANDUR) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA),2) TOTAL_PLAN_GANTT,
    ROUND(SUM(TBL.REPRDUR) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA),2) TOTAL_REPR_GANTT,
    ROUND(SUM(TBL.REALDUR) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA),2) TOTAL_REAL_GANTT,

    CASE WHEN SUM(TBL.PLANDUR) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA) = 0 THEN 0 ELSE ROUND(SUM(TBL.DURACION_PLAN_HASTA) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA) / SUM(TBL.PLANDUR) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA),2)*100 END PORC_PLAN_ATI,

    CASE WHEN SUM(TBL.REPRDUR) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA) = 0 THEN 0 ELSE ROUND(SUM(TBL.DURACION_REPR_HASTA) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA) / SUM(TBL.REPRDUR) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA),2)*100 END PORC_REPR_ATI,

    CASE WHEN SUM(TBL.REALDUR) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA) = 0 THEN 0 ELSE FLOOR(SUM(TBL.DURACION_REAL_HASTA) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA) / SUM(TBL.REALDUR) OVER(PARTITION BY dd,TBL.CD_PROYECTO, TBL.CD_TAREA)) END PORC_REAL_ATI
    FROM
    (SELECT dd,N2.CDBASETASK, N2.CDTASK, N2.NMWBS, N2.NMTASK, N2.CDTASKOWNER, N2.NRTASKINDEX, N2.NRTASKLEVEL, N2.QTPLANDUR PLANDUR, N2.QTREPLDUR REPRDUR,
    CASE WHEN N2.QTACTDUR <> 0 AND N2.QTACTDUR IS NOT NULL THEN N2.QTACTDUR ELSE CASE WHEN N2.QTREPLDUR <> 0 AND N2.QTREPLDUR IS NOT NULL THEN N2.QTREPLDUR ELSE N2.QTPLANDUR END END REALDUR,
    N1.CDTASK CD_TAREA,
    N1.NMWBS ID_TAREA,
    N1.NMTASK TAREA,

    CASE 
    WHEN N2.DTPLANST < dd AND N2.DTPLANEND < dd THEN N2.QTPLANDUR
    WHEN N2.DTPLANST > dd AND N2.DTPLANEND > dd THEN 0
    WHEN N2.DTPLANST <= dd AND N2.DTPLANEND >= dd THEN

    (select count(*) from 
      GNCALENDARWORKDAY 
      where dtday >= N2.DTPLANST
      and dtday <= dd
      and cdcalendar = P.CDCALENDAR)

    END DURACION_PLAN_HASTA,
    CASE 
    WHEN N2.DTREPLST < dd AND N2.DTREPLEND < dd THEN N2.QTREPLDUR
    WHEN N2.DTREPLST > dd AND N2.DTREPLEND > dd THEN 0
    WHEN N2.DTREPLST <= dd AND N2.DTREPLEND >= dd THEN 

    (select count(*) from 
      GNCALENDARWORKDAY 
      where dtday >= N2.DTREPLST
      and dtday <= dd
      and cdcalendar = P.CDCALENDAR)

    END DURACION_REPR_HASTA,


    CASE
    WHEN N2.DTACTST IS NULL AND N2.DTACTEND IS NULL THEN 0
    WHEN N2.DTACTST IS NOT NULL AND N2.DTACTEND IS NOT NULL THEN
    N2.QTACTPERC * CASE WHEN N2.QTACTDUR <> 0 AND N2.QTACTDUR IS NOT NULL THEN N2.QTACTDUR ELSE CASE WHEN N2.QTREPLDUR <> 0 AND N2.QTREPLDUR IS NOT NULL THEN N2.QTREPLDUR ELSE N2.QTPLANDUR END END
    WHEN N2.DTACTEND IS NULL THEN
      (

           (((select count(*) from 
      GNCALENDARWORKDAY 
      where dtday >= N2.DTACTST
      and dtday <= dd
      and cdcalendar = P.CDCALENDAR) * N2.QTACTPERC) / (select count(*) from 
      GNCALENDARWORKDAY 
      where dtday >= N2.DTACTST
      and dtday <= CURRENT_DATE
      and cdcalendar = P.CDCALENDAR)) * CASE WHEN N2.QTACTDUR <> 0 AND N2.QTACTDUR IS NOT NULL THEN N2.QTACTDUR ELSE CASE WHEN N2.QTREPLDUR <> 0 AND N2.QTREPLDUR IS NOT NULL THEN N2.QTREPLDUR ELSE N2.QTPLANDUR END END
      )

    END DURACION_REAL_HASTA,


    P.CDTASK CD_PROYECTO,
    P.NMIDTASK ID_PROYECTO,
    P.NMTASK PROYECTO
    FROM PRTASK N1
    LEFT JOIN PRTASK N2 ON N2.CDBASETASK = N1.CDBASETASK 
    LEFT JOIN PRTASK P ON P.CDTASK = N1.CDBASETASK
    CROSS JOIN
    (select generate_series
            ( (select 
    min(case when dtreplst is null then dtplanst when dtreplst <= dtplanst then dtreplst else dtplanst end) inicio
    from prtask where cdtask = cdbasetask and nmidtask = project_id)
            , (select 
    max(case when dtreplend is null then dtplanend when dtreplend >= dtplanend then dtreplend else dtplanend end) fin
    from prtask where cdtask = cdbasetask and nmidtask = project_id)
            , '1 day'::interval) dd) tmp
    WHERE
    N2.NMWBS LIKE CONCAT(N1.NMWBS, '%')
    AND N2.CDTASK NOT IN (SELECT COALESCE(CDTASKOWNER,0) FROM PRTASK WHERE CDBASETASK = N1.CDBASETASK)
    ) TBL ) TBL2 ON TBL2.CD_PROYECTO = AB.CDBASETASK AND TBL2.CD_TAREA = ATI.CDTASK
    LEFT JOIN PRTASKCOST C ON C.CDTASK = ATI.CDTASK
    LEFT JOIN PRCOSTTYPE CT ON C.CDCOSTTYPE = CT.CDCOSTTYPE
    WHERE AB.NMIDTASK = project_id
    AND CT.IDCOSTTYPE IN ('ABA.001.01','ABA.001.02','ABA.001.03','ABA.001.04','ABA.001.07','ABA.001.08','ABA.001.09')) TBL3
    GROUP BY dd,TBL3.CD_PROYECTO, TBL3.ID_PROYECTO, TBL3.PROYECTO ) TBL4;

        SELECT count(*)
        INTO records
        FROM CUSTPROJPLANDATA;
        
        RETURN records; 

end;
$$;

/** 
Ação 4 do procedimento
Llena tabla CUSTPROJPLANDATA con los datos de avance planificado y avance programado
de todos los proyectos registrados en el SE Suite. **/
select saveProjHistData(nmidtask) from prtask
where cdtask = cdbasetask;

/**Lista contenido de tabla CUSTPROJPLANDATA, tras ejecución de función saveProjHistData 
sobre todos los proyectos.**/
select * from CUSTPROJPLANDATA;